pipeline {
  agent any
  environment {
    CAUSE = "${currentBuild.getBuildCauses()[0].shortDescription}"
  }
  stages {/*
    stage('git'){
      steps{
        echo "Build caused by ${env.CAUSE}"
        echo CHANGE_URL 
        echo CHANGE_AUTHOR  
        echo CHANGE_TARGET 
        echo CHANGE_BRANCH 
        echo CHANGE_FORK
      }
    }*/
    stage('Preparation') {
      agent { 
        docker { 
          image 'python:3.6.9-alpine' 
          args '-u root:root'
          } 
        }
      steps {
        echo '======== executing Preparation Stage ========'
        sh 'pip install --upgrade pip && pip install pipreqs'
        sh 'pipreqs --force Providers && pipreqs --force Weight'
        stash(name: 'results', includes: 'Providers/requirements.txt, Weight/requirements.txt') 
      }
    }
    stage('Build') {
      steps {
        echo '======== executing Build Stage ========' 
        unstash 'results'
        script {
          flask = docker.build ("pro", "-f slim.Dockerfile Providers/")
          wgt = docker.build ("wgt", "-f slim.Dockerfile Weight/")
        }
      }
    }
    stage('Test') {
      parallel {
        stage('Pro') {
          steps {
            echo '======== executing Test Stage ========'
            sh 'docker container ls -a | grep pt && docker stop wt && docker rm wt || :'
            script {
              flask.withRun('--net nt --name pt') {
                sh 'curl --retry-delay 6 --connect-timeout 5 --max-time 5 --retry 5\
                --retry-connrefused --silent --fail pt:5000'
              }
            }
          }
        }
        stage('Wgt') {
          steps {
            sh 'docker container ls -a | grep wt && docker stop wt && docker rm wt || :'
            script {
              wgt.withRun('--net nt --name wt', 'python ./weight.py') {
                sh 'curl --retry-delay 6 --connect-timeout 5 --max-time 5 --retry 5\
                --retry-connrefused --silent wt:5000'
              }
            }

          }
        }
      }
    }/*
    stage('Compose') {
      steps {
        step ([$class: 'DockerComposeBuilder', \
        dockerComposeFile: 'Devops/e2e.yml', \
        option: [$class: 'StartAllServices'], \
        useCustomDockerComposeFile: true \
        ])
      }
    }*/

    stage('Deploy') {
      steps {
        echo '======== executing Deploy Stage ========'
        sh 'docker-compose -f Devops/docker-compose.yml up -d pro wgt'
      }
    }

  }
  post {
    always {
      echo '========always========'
    }

    success {
      echo '========pipeline executed successfully ========'
    }

    failure {
      echo '========pipeline execution failed========'
    }

  }
}
